"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdpPreview = void 0;
const express_1 = __importDefault(require("express"));
const adm_zip_1 = __importDefault(require("adm-zip"));
const system_access_1 = require("@sap-ux/system-access");
const routes_handler_1 = __importDefault(require("./routes-handler"));
/**
 * Instance of an adaptation project handling requests and data transformation.
 */
class AdpPreview {
    /**
     * @returns merged manifest.
     */
    get descriptor() {
        if (this.mergedDescriptor) {
            return this.mergedDescriptor;
        }
        else {
            throw new Error('Not initialized');
        }
    }
    /**
     * @returns a list of resources required to the adaptation project as well as the original app.
     */
    get resources() {
        if (this.mergedDescriptor) {
            const resources = {
                [this.mergedDescriptor.name]: this.mergedDescriptor.url
            };
            this.mergedDescriptor.asyncHints.libs.forEach((lib) => {
                var _a;
                if ((_a = lib.url) === null || _a === void 0 ? void 0 : _a.url) {
                    resources[lib.name] = lib.url.url;
                }
            });
            return resources;
        }
        else {
            throw new Error('Not initialized');
        }
    }
    /**
     * Constructor taking the config and a logger as input.
     *
     * @param config adp config
     * @param project reference to the root of the project
     * @param util middleware utilities provided by the UI5 CLI
     * @param logger logger instance
     */
    constructor(config, project, util, logger) {
        this.config = config;
        this.project = project;
        this.util = util;
        this.logger = logger;
        this.routesHandler = new routes_handler_1.default(project, util, logger);
    }
    /**
     * Fetch all required configurations from the backend and initialize all configurations.
     *
     * @param descriptorVariant descriptor variant from the project
     * @returns the UI5 flex layer for which editing is enabled
     */
    init(descriptorVariant) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = yield (0, system_access_1.createAbapServiceProvider)(this.config.target, { ignoreCertErrors: this.config.ignoreCertErrors }, true, this.logger);
            const lrep = provider.getLayeredRepository();
            const zip = new adm_zip_1.default();
            const files = yield this.project.byGlob('**/*.*');
            for (const file of files) {
                zip.addFile(file.getPath().substring(1), yield file.getBuffer());
            }
            const buffer = zip.toBuffer();
            // fetch a merged descriptor from the backend
            yield lrep.getCsrfToken();
            this.mergedDescriptor = (yield lrep.mergeAppDescriptorVariant(buffer))[descriptorVariant.id];
            return descriptorVariant.layer;
        });
    }
    /**
     * Proxy for the merged application manifest.json and blocking of preload files.
     *
     * @param req incoming request
     * @param res outgoing response object
     * @param next next middleware that is to be called if the request cannot be handled
     */
    proxy(req, res, next) {
        return __awaiter(this, void 0, void 0, function* () {
            if (req.path === '/manifest.json') {
                res.status(200);
                res.send(JSON.stringify(this.descriptor.manifest, undefined, 2));
            }
            else if (req.path === '/Component-preload.js') {
                res.status(404).send();
            }
            else {
                const files = yield this.project.byGlob(req.path);
                if (files.length === 1) {
                    res.status(200).send(yield files[0].getString());
                }
                else {
                    next();
                }
            }
        });
    }
    /**
     * Add additional APIs to the router that are required for adaptation projects only.
     *
     * @param router router that is to be enhanced with the API
     */
    addApis(router) {
        router.get("/adp/api/fragment" /* ApiRoutes.FRAGMENT */, this.routesHandler.handleReadAllFragments);
        router.post("/adp/api/fragment" /* ApiRoutes.FRAGMENT */, express_1.default.json(), this.routesHandler.handleWriteFragment);
        router.get("/adp/api/controller" /* ApiRoutes.CONTROLLER */, this.routesHandler.handleReadAllControllers);
        router.post("/adp/api/controller" /* ApiRoutes.CONTROLLER */, express_1.default.json(), this.routesHandler.handleWriteControllerExt);
        router.get("/adp/api/code_ext/:controllerName" /* ApiRoutes.CODE_EXT */, this.routesHandler.handleGetControllerExtensionData);
    }
}
exports.AdpPreview = AdpPreview;
//# sourceMappingURL=adp-preview.js.map