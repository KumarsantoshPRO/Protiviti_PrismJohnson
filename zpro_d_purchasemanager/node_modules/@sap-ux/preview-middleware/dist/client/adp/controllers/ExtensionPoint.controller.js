"use strict";

sap.ui.define(["sap/m/MessageToast", "sap/ui/model/json/JSONModel", "../api-handler", "./BaseDialog.controller"], function (MessageToast, JSONModel, ___api_handler, __BaseDialog) {
  "use strict";

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule && typeof obj.default !== "undefined" ? obj.default : obj;
  }
  const getFragments = ___api_handler["getFragments"];
  const writeFragment = ___api_handler["writeFragment"];
  const BaseDialog = _interopRequireDefault(__BaseDialog);
  /**
   * @namespace open.ux.preview.client.adp.controllers
   */
  const ExtensionPoint = BaseDialog.extend("open.ux.preview.client.adp.controllers.ExtensionPoint", {
    constructor: function _constructor(name, _overlays, _rta, extensionPointData) {
      BaseDialog.prototype.constructor.call(this, name);
      this.model = new JSONModel();
      this.extensionPointData = extensionPointData;
    },
    onInit: async function _onInit() {
      this.dialog = this.byId('addFragmentAtExtPointDialog');
      this.setEscapeHandler();
      await this.buildDialogData();
      this.getView()?.setModel(this.model);
      this.dialog.open();
    },
    onCreateBtnPress: async function _onCreateBtnPress(event) {
      const source = event.getSource();
      source.setEnabled(false);
      const fragmentName = this.model.getProperty('/newFragmentName');
      await this.createNewFragment(fragmentName);
      this.handleDialogClose();
    },
    buildDialogData: async function _buildDialogData() {
      this.model.setProperty('/extensionPointName', this.extensionPointData?.name);
      try {
        const {
          fragments
        } = await getFragments();
        this.model.setProperty('/fragmentList', fragments);
      } catch (e) {
        MessageToast.show(e.message);
        throw new Error(e.message);
      }
    },
    createNewFragment: async function _createNewFragment(fragmentName) {
      try {
        await writeFragment({
          fragmentName
        });
        MessageToast.show(`Fragment with name '${fragmentName}' was created.`);
      } catch (e) {
        // In case of error when creating a new fragment, we should not create a change file
        MessageToast.show(e.message);
        throw new Error(e.message);
      }
      await this.createExtensionPointFragmentChange(fragmentName);
    },
    createExtensionPointFragmentChange: async function _createExtensionPointFragmentChange(fragmentName) {
      const modifiedValue = {
        fragmentPath: `fragments/${fragmentName}.fragment.xml`,
        extensionPointName: this.extensionPointData.name
      };
      this.extensionPointData.deffered.resolve(modifiedValue);
    }
  });
  return ExtensionPoint;
});
//# sourceMappingURL=ExtensionPoint.controller.js.map