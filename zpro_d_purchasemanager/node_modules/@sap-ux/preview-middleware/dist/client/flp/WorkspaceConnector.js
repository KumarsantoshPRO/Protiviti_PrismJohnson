"use strict";

sap.ui.define(["sap/base/util/merge", "sap/ui/fl/write/api/connectors/ObjectStorageConnector", "sap/ui/fl/Layer", "sap/ui/VersionInfo"], function (merge, ObjectStorageConnector, Layer, VersionInfo) {
  "use strict";

  const path = '/preview/api/changes';
  function getFlexSettings() {
    let result;
    const bootstrapConfig = document.getElementById('sap-ui-bootstrap');
    const flexSetting = bootstrapConfig?.getAttribute('data-open-ux-preview-flex-settings');
    if (flexSetting) {
      result = JSON.parse(flexSetting);
    }
    return result;
  }
  const connector = merge({}, ObjectStorageConnector, {
    layers: [Layer.VENDOR, Layer.CUSTOMER_BASE],
    storage: {
      _itemsStoredAsObjects: true,
      setItem: function (_key, change) {
        const settings = getFlexSettings();
        if (settings) {
          change.support ??= {};
          change.support.generator = settings.generator;
        }
        return fetch(path, {
          method: 'POST',
          body: JSON.stringify(change, null, 2),
          headers: {
            'content-type': 'application/json'
          }
        });
      },
      removeItem: function (key) {
        return fetch(path, {
          method: 'DELETE',
          body: JSON.stringify({
            fileName: key
          }),
          headers: {
            'content-type': 'application/json'
          }
        });
      },
      clear: function () {
        // not implemented
      },
      getItem: function (_key) {
        // not implemented
      },
      getItems: async function () {
        const response = await fetch(path, {
          method: 'GET',
          headers: {
            'content-type': 'application/json'
          }
        });
        const changes = await response.json();
        return changes;
      }
    },
    loadFeatures: async function () {
      const features = await ObjectStorageConnector.loadFeatures();
      const ui5Version = await VersionInfo.load();
      const [majorVersion, minorVersion] = ui5Version.version.split('.').map(v => parseInt(v, 10));
      features.isVariantAdaptationEnabled = majorVersion >= 1 && minorVersion >= 90;
      const settings = getFlexSettings();
      if (settings?.developerMode) {
        features.isVariantAdaptationEnabled = false;
      }
      if (settings?.scenario === 'ADAPTATION_PROJECT') {
        features.isVariantAdaptationEnabled = true;
      }
      return features;
    }
  });
  return connector;
});
//# sourceMappingURL=WorkspaceConnector.js.map