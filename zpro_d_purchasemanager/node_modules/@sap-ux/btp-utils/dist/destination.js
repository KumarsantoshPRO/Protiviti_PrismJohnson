"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFullUrlDestination = exports.isPartialUrlDestination = exports.isGenericODataDestination = exports.isAbapEnvironmentOnBtp = exports.isAbapSystem = exports.WebIDEAdditionalData = exports.WebIDEUsage = void 0;
/**
 * Relevant values for the WebIDEUsage property used to identify different types of destinations.
 */
var WebIDEUsage;
(function (WebIDEUsage) {
    WebIDEUsage["ODATA_GENERIC"] = "odata_gen";
    WebIDEUsage["ODATA_ABAP"] = "odata_abap";
    WebIDEUsage["DEV_ABAP"] = "dev_abap";
    WebIDEUsage["ABAP_CLOUD"] = "abap_cloud";
})(WebIDEUsage = exports.WebIDEUsage || (exports.WebIDEUsage = {}));
/**
 * Possible values for the WebIDEAdditionalData property
 */
var WebIDEAdditionalData;
(function (WebIDEAdditionalData) {
    WebIDEAdditionalData["FULL_URL"] = "full_url";
    WebIDEAdditionalData["API_MGMT"] = "api_mgmt";
})(WebIDEAdditionalData = exports.WebIDEAdditionalData || (exports.WebIDEAdditionalData = {}));
/**
 * Checks whether the provided destination is configured to point to an ABAP system (both cloud and on-premise).
 *
 * @param destination destination info
 * @returns true of the destination is configured for an ABAP system
 */
function isAbapSystem(destination) {
    var _a, _b;
    return Boolean(((_a = destination.WebIDEUsage) === null || _a === void 0 ? void 0 : _a.includes('abap')) ||
        destination['sap-client'] ||
        ((_b = destination['sap-platform']) === null || _b === void 0 ? void 0 : _b.toLocaleLowerCase()) === 'abap');
}
exports.isAbapSystem = isAbapSystem;
/**
 * Checks whether the provided destination is configured to point to an ABAP environment on BTP (aka steampunk).
 *
 * @param destination destination info
 * @returns true of the destination is configured for a steampunk system
 */
function isAbapEnvironmentOnBtp(destination) {
    var _a, _b;
    return Boolean(((_a = destination.WebIDEUsage) === null || _a === void 0 ? void 0 : _a.includes(WebIDEUsage.ABAP_CLOUD)) ||
        ((_b = destination['sap-platform']) === null || _b === void 0 ? void 0 : _b.toLocaleLowerCase()) === 'abap');
}
exports.isAbapEnvironmentOnBtp = isAbapEnvironmentOnBtp;
/**
 * Checks if the destination attributes WebIDEUsage is configured with odata_gen, and not odata_abap
 * We want to maintain existing destinations, perhaps accidentally configured with both, continue
 * working as abap catalogs.
 *
 * @param destination destination info
 * @returns true, if this destination has the the 'odata_gen', and not the 'odata_abap' attribute set
 */
function isGenericODataDestination(destination) {
    var _a;
    return Boolean(((_a = destination.WebIDEUsage) === null || _a === void 0 ? void 0 : _a.includes(WebIDEUsage.ODATA_GENERIC)) &&
        !destination.WebIDEUsage.includes(WebIDEUsage.ODATA_ABAP));
}
exports.isGenericODataDestination = isGenericODataDestination;
/**
 * A destination configured as generic odata without the 'full_url' attribute are considered partial url destinations.
 *
 * @param destination destination info
 * @returns true, if this destination is generic odata and 'full_url' attribute is not set
 */
function isPartialUrlDestination(destination) {
    var _a;
    return Boolean(!((_a = destination.WebIDEAdditionalData) === null || _a === void 0 ? void 0 : _a.includes(WebIDEAdditionalData.FULL_URL)) &&
        isGenericODataDestination(destination));
}
exports.isPartialUrlDestination = isPartialUrlDestination;
/**
 * A destination configured as generic odata WITH the 'full_url' attribute are considered full url destinations.
 *
 * @param destination destination info
 * @returns true, if this destination has the generic odata and 'full_url' attribute is set
 */
function isFullUrlDestination(destination) {
    var _a;
    return Boolean(((_a = destination.WebIDEAdditionalData) === null || _a === void 0 ? void 0 : _a.includes(WebIDEAdditionalData.FULL_URL)) &&
        isGenericODataDestination(destination));
}
exports.isFullUrlDestination = isFullUrlDestination;
//# sourceMappingURL=destination.js.map