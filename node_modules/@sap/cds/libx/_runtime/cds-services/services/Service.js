const cds = require('../../cds')

const { resolveView, restoreLink, findQueryTarget } = require('../../common/utils/resolveView')
const { postProcess } = require('../../common/utils/postProcessing')

const _isSimpleCqnQuery = q => typeof q === 'object' && q !== null && !Array.isArray(q) && Object.keys(q).length > 0

/**
 * Generic Application Service Provider
 */
class ApplicationService extends cds.Service {
  init() {
    const clazz = this.constructor,
      { generics } = clazz
    for (let each of generics) clazz[each].call(this)
    return super.init()
  }

  static get generics() {
    let generics = Reflect.getOwnPropertyDescriptor(this, '_generics')
    if (generics) return generics.value
    else {
      const set = new Set(this.__proto__.generics)
      for (let p of Reflect.ownKeys(this)) if (p.startsWith('handle_')) set.add(p)
      Object.defineProperty(this, '_generics', { value: (generics = [...set]) })
    }
    return generics
  }

  static handle_authorization() {
    require('../../common/generic/auth').call(this)
  }

  static handle_etags() {
    require('../../common/generic/etag').call(this)
  }

  static handle_validations() {
    require('../../common/generic/input').call(this)
  }

  static handle_stream_property() {
    require('../../common/generic/stream').call(this)
  }

  static handle_puts() {
    require('../../common/generic/put').call(this)
  }

  static handle_temporal_data() {
    require('../../common/generic/temporal').call(this)
  }

  static handle_localized_data() {
    // TODO: can we move handling of localized data here?
  }

  static handle_managed_data() {
    // TODO: can we move handling of managed data here?
  }

  static handle_paging() {
    require('../../common/generic/paging').call(this) // > paging must be executed before sorting
    require('../../common/generic/sorting').call(this)
  }

  static handle_code_ext() {
    if (cds.env.requires.extensibility?.code) require('../../common/code-ext/handlers').call(this)
  }

  static handle_fiori() {
    require('../../fiori/draft').impl.call(this)
  }

  static handle_crud() {
    require('../../common/generic/crud').impl.call(this)
  }

  // Overload .handle in order to resolve projections up to a definition that is known by the remote service instance.
  // Result is post processed according to the inverse projection in order to reflect the correct result of the original query.
  async handle(req) {
    // compat mode
    if (req._resolved) return super.handle(req)
    if (req.target && req.target.name && req.target.name.startsWith(this.namespace + '.')) return super.handle(req)

    // req.query can be:
    // - empty object in case of unbound action/function
    // - undefined/null in case of plain string queries
    if (this.model && _isSimpleCqnQuery(req.query)) {
      const q = resolveView(req.query, this.model, this)
      const t = findQueryTarget(q) || req.target // REVISIT: why is req.target not correct?

      // compat
      restoreLink(req)
      if (req.query.SELECT && req.query.SELECT._4odata) {
        Object.defineProperty(q.SELECT, '_4odata', { value: req.query.SELECT._4odata })
      }

      // REVISIT: We need to provide target explicitly because it's cached already within ensure_target
      const newReq = new cds.Request({ query: q, target: t, _resolved: true })
      const result = await super.dispatch(newReq)

      return postProcess(q, result, this)
    }

    return super.handle(req)
  }

  /**
   * @param serviceImpl
   * @deprecated since version 1.11.0 - use Service.prepend instead
   */
  with(serviceImpl) {
    return this.prepend(serviceImpl)
  }

  /**
   * Registers custom handlers.
   * @param {string | object | Function} serviceImpl - init function to register custom handlers.
   */
  impl(serviceImpl) {
    if (typeof serviceImpl === 'string') serviceImpl = require(serviceImpl)
    return this.prepend(serviceImpl)
  }
}

// NOTE: getRestrictions is VERY INOFFICIAL!!!
const { getRestrictions } = require('../../common/generic/auth/restrictions')
ApplicationService.prototype.getRestrictions = function (..._) {
  return getRestrictions.call(this, ..._)
}

ApplicationService.prototype.isAppService = true
module.exports = ApplicationService
