const cds = require('../../cds')

const containsAnyRestrictions = srv => {
  const accessRestrictions = getAccessRestrictions(srv)
  if (accessRestrictions.length > 1 || accessRestrictions[0] !== 'any') return true

  const entities = srv.entities
  const entitiesKeys = Object.keys(entities)

  return !!(
    entitiesKeys.some(entity => entities[entity]['@requires'] || entities[entity]['@restrict']) ||
    entitiesKeys.some(entity => {
      const actions = entities[entity].actions
      actions && Object.keys(actions).some(action => actions[action]['@requires'] || actions[action]['@restrict'])
    }) ||
    Object.keys(srv.operations).some(
      operation => srv.operations[operation]['@requires'] || srv.operations[operation]['@restrict']
    )
  )
}

const getAccessRestrictions = srv => {
  let restrictions = srv.definition['@restrict'] || srv.definition['@requires']
  if (restrictions) {
    if (typeof restrictions === 'string') restrictions = [restrictions]
    else
      restrictions = restrictions
        .map(r => (typeof r === 'string' ? r : r.to))
        .reduce((acc, cur) => {
          Array.isArray(cur) ? acc.push(...cur) : acc.push(cur)
          return acc
        }, [])
  } else {
    const { restrict_all_services } = cds.env.requires.auth
    const in_prod = process.env.NODE_ENV === 'production'
    // REVISIT: cleanup during streamlined auth
    const is_mocked_auth = cds.env.requires.auth._kind === 'mocked'
    if (restrict_all_services === false || !in_prod || is_mocked_auth) restrictions = ['any']
    else restrictions = ['authenticated-user']
  }
  return restrictions
}

module.exports = {
  containsAnyRestrictions,
  getAccessRestrictions
}
