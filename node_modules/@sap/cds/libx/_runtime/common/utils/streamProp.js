const { ensureNoDraftsSuffix, ensureUnlocalized } = require('../../fiori/utils/handler')
const { isDuplicate } = require('./rewriteAsterisks')

const _addColumn = (name, type, columns) => {
  if (typeof type === 'object') {
    const ref = {
      ref: [type['=']],
      as: `${name}@odata.mediaContentType`
    }
    if (!columns.find(isDuplicate(ref))) columns.push(ref)
  } else {
    const val = { val: type, as: `${name}@odata.mediaContentType` }
    if (!columns.find(isDuplicate(val))) columns.push(val)
  }
}

const _changeStreamProperties = (target, columns, model) => {
  let index = columns.length
  while (index--) {
    const col = columns[index]
    const name = col.ref && col.ref[col.ref.length - 1]
    const element = name && target.elements[name]
    const type = element && element['@Core.MediaType']

    if (col === '*') {
      for (const k in target.elements) {
        const el = target.elements[k]
        if (el['@Core.MediaType']) {
          const type = el['@Core.MediaType']
          _addColumn(el.name, type, columns)
        }
      }
    } else if (col.ref && type) {
      _addColumn(name, type, columns)
      if (!element['@Core.IsURL']) columns.splice(index, 1)
    } else if (col.expand && col.ref) {
      const tgt = target.elements[col.ref] && target.elements[col.ref].target
      tgt && _changeStreamProperties(model.definitions[ensureUnlocalized(ensureNoDraftsSuffix(tgt))], col.expand, model)
    }
  }
}

const handleStreamProperties = (target, select, model, _4odata) => {
  const columns = select.SELECT?.columns
  if (!columns || !target || !model) return
  if (!_4odata && !select.SELECT._4odata) return
  if (select._streaming) return

  _changeStreamProperties(target, columns, model)
}

module.exports = { handleStreamProperties }
