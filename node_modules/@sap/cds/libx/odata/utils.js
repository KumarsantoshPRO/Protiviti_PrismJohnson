const { toBase64url } = require('../_runtime/common/utils/binary')
const cds = require('../_runtime/cds')

const MATH_FUNC = { round: 1, floor: 1, ceiling: 1 }

const getSafeNumber = inputString => {
  if (typeof inputString !== 'string') return inputString
  // Try to parse the input string as a floating-point number using parseFloat
  const parsedFloat = parseFloat(inputString)
    
  // Check if the parsed value is not NaN and is equal to the original input string
  if (!isNaN(parsedFloat) && String(parsedFloat) === inputString) {
    return parsedFloat
  } 
  
  // Try to parse the input string as an integer using parseInt
  const parsedInt = parseInt(inputString);
  // special case like '3.00000000000001', the precision is not lost and string is returned
  if (!isNaN(parsedInt) && String(parsedInt) === inputString.replace(/^-?\d+\.0+$/, inputString.split('.')[0])) {
    return parsedInt
  }

  // If none of the above conditions are met, return the input string as is
  return inputString
}

const UUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i
const _PT = ([hh, mm, ss]) => `PT${hh}H${mm}M${ss}S`
const _isTimestamp = val =>
  /^\d+-\d\d-\d\d(T\d\d:\d\d(:\d\d(\.\d+)?)?(Z|([+-]{1}\d\d:\d\d))?)?$/.test(val) && !isNaN(Date.parse(val))

const _getElement = (csnTarget, key) => {
  if (csnTarget) {
    if (csnTarget.elements) {
      if (Array.isArray(key)) {
        const [navigation, ...targetElement] = key
        const element = csnTarget.elements[navigation]
        if (element && element.isAssociation) {
          return _getElement(
            csnTarget.elements[navigation]._target,
            targetElement.length > 1 ? targetElement : targetElement[0]
          )
        } else if (element && element._isStructured) {
          return _getElement(
            csnTarget.elements[navigation],
            targetElement.length > 1 ? targetElement : targetElement[0]
          )
        }
      }
      return (
        csnTarget.elements[key] || {
          type: undefined
        }
      )
    } else if (csnTarget.params) {
      return (
        csnTarget.params[key] || {
          type: undefined
        }
      )
    }
  }

  return {
    type: undefined
  }
}

const _v2 = (val, element) => {
  switch (element.type) {
    case 'cds.UUID':
      return `guid'${val}'`
    // binaries
    case 'cds.Binary':
    case 'cds.LargeBinary':
      return `binary'${toBase64url(val)}'`
    // integers
    case 'cds.UInt8':
    case 'cds.Int16':
    case 'cds.Int32':
    case 'cds.Integer':
      return val
    // big integers
    case 'cds.Int64':
    case 'cds.Integer64':
      // inofficial flag to skip appending "L"
      return cds.env.remote?.skip_v2_appendix ? val : `${val}L`.replace(/ll$/i, 'L')
    // floating point numbers
    case 'cds.Decimal':
      // inofficial flag to skip appending "m"
      return cds.env.remote?.skip_v2_appendix ? val : `${val}m`.replace(/mm$/i, 'm')
    case 'cds.Double':
      // inofficial flag to skip appending "d"
      return cds.env.remote?.skip_v2_appendix ? val : `${val}d`.replace(/dd$/i, 'd')
    // dates et al
    case 'cds.Date':
      return element['@odata.Type'] === 'Edm.DateTimeOffset'
        ? `datetimeoffset'${val}T00:00:00'`
        : `datetime'${val}T00:00:00'`
    case 'cds.DateTime':
      return element['@odata.Type'] === 'Edm.DateTimeOffset' ? `datetimeoffset'${val}'` : `datetime'${val}'`
    case 'cds.Time':
      return `time'${_PT(val.split(':'))}'`
    case 'cds.Timestamp':
      return element['@odata.Type'] === 'Edm.DateTime' ? `datetime'${val}'` : `datetimeoffset'${val}'`
    // bool
    case 'cds.Boolean':
      return val
    // strings + default to string representation
    case 'cds.String':
    case 'cds.LargeString':
    default:
      return `'${val}'`
  }
}

const _v4 = (val, element) => {
  switch (element.type) {
    case 'cds.UUID':
      return val
    // binary
    case 'cds.Binary':
    case 'cds.LargeBinary':
      return `binary'${toBase64url(val)}'`
    // integers
    case 'cds.UInt8':
    case 'cds.Int16':
    case 'cds.Int32':
    case 'cds.Integer':
      return val
    // big integers
    case 'cds.Int64':
    case 'cds.Integer64':
      return val
    // floating point numbers
    case 'cds.Decimal':
    case 'cds.Double':
      return val
    // dates et al
    case 'cds.DateTime':
    case 'cds.Date':
    case 'cds.Timestamp':
    case 'cds.Time':
      return val
    // bool
    case 'cds.Boolean':
      return val
    // strings + default to string representation
    case 'cds.String':
    case 'cds.LargeString':
    default:
      return `'${val}'`
  }
}

const formatVal = (val, elementName, csnTarget, kind, func) => {
  if (val === null || val === 'null') return 'null'
  if (typeof val === 'boolean') return val
  if (typeof val === 'string') {
    if (!csnTarget && UUID.test(val)) return kind === 'odata-v2' ? `guid'${val}'` : val
    if (func in MATH_FUNC) return val
  }
  if (typeof val === 'number') val = getSafeNumber(val)
  if (!csnTarget) {
    if (typeof val !== 'string') return val
    // REVISIT: why do we need to check strings for timestamps?
    if (_isTimestamp(val)) return val
    return `'${val}'`
  }
  const element = _getElement(csnTarget, elementName)
  if (!element?.type) return typeof val === 'string' ? `'${val}'` : val
  return kind === 'odata-v2' ? _v2(val, element) : _v4(val, element)
}

const skipToken = (token, cqn) => {
  const LOG = cds.log('odata')
  if (isNaN(token)) {
    let decoded
    try {
      decoded = JSON.parse(Buffer.from(token, 'base64').toString())
    } catch (err) {
      LOG.warn('$skiptoken is not in expected format. Ignoring it.')
      return
    }
    const xprs = decoded.c.map(() => [])

    for (let i = 0; i < xprs.length; i++) {
      const { k, v, a } = decoded.c[i]
      const ref = { ref: [k] }
      const val = { val: v }

      if (i > 0) xprs[i].push('and')
      xprs[i].push(ref, a ? '>' : '<', val)

      for (let j = i + 1; j < xprs.length; j++) {
        if (i > 0) xprs[j].push('and')
        xprs[j].push(ref, '=', val)
      }
    }

    const xpr = []
    for (let i = 0; i < xprs.length; i++) {
      if (i > 0) xpr.push('or')
      xpr.push(...xprs[i])
    }

    if (cqn.SELECT.where) {
      cqn.SELECT.where = [{ xpr: [...cqn.SELECT.where] }, 'and', { xpr }]
    } else {
      cqn.SELECT.where = [{ xpr }]
    }

    if (cds.context?.http.req.query.$top) {
      const top = parseInt(cds.context?.http.req.query.$top)
      if (top - decoded.r < cqn.SELECT.limit.rows.val) {
        cqn.SELECT.limit.rows.val = top - decoded.r
      }
    }
  } else {
    const { limit } = cqn.SELECT
    if (!limit) {
      cqn.SELECT.limit = { offset: { val: parseInt(token) } }
    } else {
      const { offset } = limit
      cqn.SELECT.limit.offset = { val: (offset && 'val' in offset ? offset.val : offset || 0) + parseInt(token) }
    }
  }
}

module.exports = {
  getSafeNumber,
  formatVal,
  skipToken
}
