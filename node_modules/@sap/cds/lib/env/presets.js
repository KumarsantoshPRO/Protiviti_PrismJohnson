const cds = require('../index')

const { join } = cds.utils.path

const PROTOCOLS = {
  'odata-v4': { path: '/odata/v4', impl: join(__dirname,'../srv/protocols/odata-v4') },
  rest: { path: '/rest', impl: join(__dirname,'../srv/protocols/rest') }
}

// REVISIT: Looks very hard-coded -> move this to consumers?
module.exports = function (conf) {
  let { features } = conf

  // protocols configuration
  let p = conf.protocols || {}
  for (let [k, o] of Object.entries(p)) {
    if (typeof o === 'string') p[k] = { path: o }
    if (!p[k].path.startsWith('/')) p[k].path = `/${p[k].path}`
  }

  p['odata-v4'] = Object.assign({}, PROTOCOLS['odata-v4'], p.odata, p['odata-v4'])
  p.odata = Object.assign({}, PROTOCOLS['odata-v4'], p['odata-v4'], p.odata)
  p.rest = Object.assign({}, PROTOCOLS.rest, p.rest)

  // odata must always be first for fallback
  conf.protocols = { odata: p.odata, ...p }

  // integrity checks
  if (!features) return
  if (typeof features.assert_integrity === 'string' && features.assert_integrity.match(/db/i)) {
    features.assert_integrity = true
    features.assert_integrity_type = 'DB'
  } else features.assert_integrity = false
}

