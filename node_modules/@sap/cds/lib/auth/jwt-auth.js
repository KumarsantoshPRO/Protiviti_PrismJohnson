const cds = require('../')
const LOG = cds.log('auth')

// _require for better error message
const _require = require('../../libx/_runtime/common/utils/require')
const express = _require('express')
const passport = _require('passport')
const { JWTStrategy } = _require('@sap/xssec')

module.exports = function jwt_auth(config) {
  if (!config.credentials) {
    let msg = `Authentication kind "${config.kind}" configured, but no XSUAA instance bound to application.`
    msg += ' Either bind an IAS instance, or switch to an authentication kind that does not require a binding.'
    throw new Error(msg)
  }

  passport.use('JWT', new JWTStrategy(config.credentials))

  return express
    .Router()
    .use((req, res, next) => {
      // callback needed in order to suppress 401 and continue with anonymous to allow @requires: 'any'/ restrict_all_services=false
      const callback = (err, user, info, _status) => {
        if (err) return next(err)

        if (user) {
          req.user = user
          req.authInfo = info
        } else {
          req.user = new cds.User.default
          if (LOG._debug && req.tokenInfo)
            LOG.debug('Error during token validation:', req.tokenInfo.getErrorObject().message)
        }

        next()
      }
      passport.authenticate('JWT', { session: false }, callback)(req, res, next)
    })
    .use((req, res, next) => {
      if (!('authInfo' in req)) return next()

      const payload = req.tokenInfo.getPayload()

      let id = req.user.id

      // Roles = scope names w/o xsappname
      let xsappname = new RegExp(`^${config.credentials.xsappname}\\.`)
      let roles = payload.scope.map(s => s.replace(xsappname, ''))

      // Disallow setting system roles from external
      roles = roles.filter(r => !(r in { 'internal-user': 1, 'system-user': 1 }))

      roles.push('identified-user')
      if (payload.grant_type) {
        // > not "weak"
        roles.push('authenticated-user')

        if (payload.grant_type in { client_credentials: 1, client_x509: 1 }) {
          id = 'system'
          roles.push('system-user')
          if (req.tokenInfo.getClientId() === config.credentials.clientid) roles.push('internal-user')
        }
      }

      let attr = req.authInfo.getAttributes() || {}
      if (config.kind === 'xsuaa') {
        attr.logonName = req.authInfo.getLogonName()
        attr.givenName = req.authInfo.getGivenName()
        attr.familyName = req.authInfo.getFamilyName()
        attr.email = req.authInfo.getEmail()
      }

      req.user = new cds.User({ id, roles, attr })
      req.tenant = req.tokenInfo.getZoneId?.()

      next()
    })
}
