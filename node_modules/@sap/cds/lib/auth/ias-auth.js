const cds = require('../')
const LOG = cds.log('auth')

// _require for better error message
const _require = require('../../libx/_runtime/common/utils/require')
const express = _require('express')
const passport = _require('passport')
const { JWTStrategy } = _require('@sap/xssec')

const RESERVED_ATTRIBUTES = new Set(['aud', 'azp', 'exp', 'ext_attr', 'iat', 'ias_iss', 'iss', 'jti', 'sub', 'user_uuid', 'zone_uuid', 'zid'])

module.exports = function ias_auth(config) {
  if (!config.credentials) {
    let msg = `Authentication kind "${config.kind}" configured, but no IAS instance bound to application.`
    msg += ' Either bind an IAS instance, or switch to an authentication kind that does not require a binding.'
    throw new Error(msg)
  }

  passport.use('IAS', new JWTStrategy(config.credentials))

  return express
    .Router()
    .use((req, res, next) => {
      // callback needed in order to suppress 401 and continue with anonymous to allow @requires: 'any'/ restrict_all_services=false
      const callback = (err, user, info, _status) => {
        if (err) return next(err)

        if (user) {
          req.user = user
          req.authInfo = info
        } else {
          req.user = new cds.User.default
          if (LOG._debug && req.tokenInfo)
            LOG.debug('Error during token validation:', req.tokenInfo.getErrorObject().message)
        }

        next()
      }
      passport.authenticate('IAS', { session: false }, callback)(req, res, next)
    })
    .use((req, res, next) => {
      if (!('authInfo' in req)) return next()

      const payload = req.tokenInfo.getPayload()
      if (req.tokenInfo.getClientId() === req.tokenInfo.getSubject()) {
        //> grant_type === client_credentials or x509
        const roles = ['authenticated-user', 'system-user']
        if (payload.azp === config.credentials.clientid) roles.push('internal-user')
        req.user = new cds.User({ id: 'system', roles, attr: {} })
      } else {
        // add all unknown attributes to req.user.attr in order to keep public API small
        const attributes = Object.keys(payload)
          .filter(k => !RESERVED_ATTRIBUTES.has(k))
          .reduce((attrs, k) => { attrs[k] = payload[k]; return attrs }, {})

        req.user = new cds.User({
          id: req.user.id,
          roles: ['authenticated-user'],
          attr: attributes
        })
      }

      req.tenant = req.tokenInfo.getZoneId()

      next()
    })
}
