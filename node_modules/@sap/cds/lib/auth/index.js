const cds = require ('../index'), { path, local } = cds.utils

const _require = require; require = cds.lazified (module) // eslint-disable-line no-global-assign
module.exports = Object.assign (auth_factory, {
  mocked: require('./basic-auth'),
  basic:  require('./basic-auth'),
  dummy:  require('./dummy-auth'),
  ias:    require('./ias-auth'),
  jwt:    require('./jwt-auth'),
  xsuaa:  require('./jwt-auth'),
})
require = _require // eslint-disable-line no-global-assign

/**
 * Constructs one of the above middlewares as configured
 */
function auth_factory (options) {
  const o = { ...options, ...cds.requires.auth }
  let kind = o.impl ? 'custom' : o.kind || o.strategy
  let middleware = cds.auth[kind] || cds.auth[kind?.replace(/-auth$/, '')]
  if (middleware) {
    // REVISIT: here, kind may be misleading, e.g., "basic-auth" instead of "mocked" -> _kind workaround
    const _kind = (o._kind || kind).replace(/-auth$/, '') //> official auth kinds are NOT postfixed with "-auth"
    cds.log().info ('using authentication:', { kind: _kind }, '\n')
  } else {
    let impl = kind === 'custom' ? cds.resolve (o.impl)?.[0] : path.resolve (__dirname, kind)
    try { impl = require.resolve (impl) }  catch {
      const e = o.impl ? `Cannot find custom impl at: ${o.impl}` : `Cannot find unknown auth kind: ${o.kind}`
      throw cds.error(e)
    }
    cds.log().info ('using authentication:', { kind, impl: local(impl) }, '\n')
    middleware = require(impl)
  }
  if ((typeof middleware === 'function' && middleware.length === 3) || Array.isArray(middleware)) {
    return middleware
  }
  return middleware(o)
}
