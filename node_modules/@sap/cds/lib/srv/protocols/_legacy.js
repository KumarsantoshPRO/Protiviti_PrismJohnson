const libx = require('../../../libx/_runtime')
const cds_context_model = require('../srv-models')
const cds_context = require('../middlewares/cds-context')()
const ctx_auth = require('../middlewares/ctx-auth')()
const { ProtocolAdapter } = require('.')

class LegacyProtocolAdapter extends ProtocolAdapter {

  static init(protocols = { ...cds.env.protocols }) {
    // Legacy protocol behavior for odata and rest,
    // but ensure that additional protocols like graphql can be configured
    protocols['odata-v4'] = { get impl() { return libx.to.odata_v4 } }
    protocols['odata'] = { get impl() { return libx.to.odata_v4 } }
    protocols['rest'] = { get impl() { return libx.to.rest } }
    return this.protocols = cds.service._protocols = protocols
  }

  static serve (srv, /* in: */ app) {
    return super.serve (srv, app, { before: [
      cds_context,
      libx.perf,
      libx.auth(srv),
      ctx_auth,
      cap_req_logger,
      cds_context_model.middleware4(srv)
    ], after:[] })
  }

}

const cds = require('../../index')
const LOG = cds.log(), DEBUG = cds.debug()
function cap_req_logger (req,_,next) {
  let url = req.originalUrl
  try { url = decodeURI(req.originalUrl) } catch (e) { /* decodeURI throws error for invalid urls */ }
  LOG && LOG (req.method, url, req.body||'')
  if (/\$batch/.test(req.url))  req.on ('dispatch', (req) => {
    let path = req._path
    try { path = decodeURI(req._path) } catch (e) { /* decodeURI throws error for invalid urls */ }
    LOG && LOG ('>', req.event, path, req._query||'')
    if (DEBUG && req.query) DEBUG (req.query)
  })
  next()
}

LegacyProtocolAdapter.init()
module.exports = LegacyProtocolAdapter