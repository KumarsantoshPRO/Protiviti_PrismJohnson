const cds = require('../../index')
const {join} = cds.utils.path

class ProtocolAdapter {

  /**
   * Provides canonicalized protocols configurations
   */
  static init (protocols = { ...cds.env.protocols }) {
    for (let each in protocols) protocols[each].kind = each
    return this.protocols = cds.service._protocols = protocols
  }

  /**
   * Returns the middleware impl for the given protocol
   */
  static middlewareFor (p) {
    const conf = this.protocols[p] || (this.protocols[p] = {})
    let { impl = join(__dirname,p) } = conf; if (typeof impl !== 'function') {
      try { require.resolve(impl) } catch { cds.error `Cannot find protocol adapter implementation: ${impl}` }
      impl = conf.impl = require(impl)
    }
    return impl
  }

  /**
   * Constructs a new adapter for the given service, or returns a formerly constructed one
   */
  static for (srv, p = srv.options?.to || protocol4(srv.definition)) { // TODO default for param p?
    const cache = srv._adapters || (srv._adapters={}); if (p in cache) return cache[p]
    const impl = this.middlewareFor(p), conf = this.protocols[p]
    return cache[p] = impl (srv, conf)
  }

  /**
   * Constructs a new adapter for the given service, and mounts it to an express app.
   */
  static serve (srv, /* in: */ app, { before, after } = cds.middlewares) {
    const logger = cds.log('adapters')

    const endpoints = cds.service.endpoints4(srv, srv.options)
    
    if (endpoints.length > 1 && !cds.requires.middlewares) {
      cds.error `Cannot serve multiple endpoints if cds.requires.middlewares is set to false`
    }

    for (let endpoint of endpoints) {
      let adapter = this.for(srv, endpoint.kind); if (!adapter) continue
      // REVISIT: still needed with new handling in @sap/cds-fiori?
      app.use (`${endpoint.path}/webapp/`, (_,res) => res.sendStatus(404))
      app.use (adapter.path = endpoint.path, before, adapter, after)
      logger._debug && logger.debug('app.use(', endpoint.path, ', ... )')

      // REVISIT: move to @sap/cds-fiori
      // log warning for changed path if $metadata is accessed
      if (!cds.env.features.serve_on_root && endpoint.path.startsWith(this.protocols[endpoint.kind].path)) {
        const oldPath = endpoint.path.replace(this.protocols[endpoint.kind].path, '')
        let logged = false
        app.use(`*${oldPath}/\\$metadata`, (req,res,next) => {
          if (!logged) {
            logger._warn && logger.warn(`With @sap/cds version 7, the service path has changed to '${endpoint.path}'.
            If you use SAP Fiori Elements, make sure to adapt the 'dataSources.uri' paths
            in 'manifest.json' files accordingly. For more information, see the release notes at
            https://cap.cloud.sap/docs/releases/jun23.`)
            logged = true
          }
          next()
        })
      }
    }
  }
}

const protocols = Object.keys(ProtocolAdapter.init())
// REVISIT remove protocol4 (and protocols variable)
const protocol4 = (def, _default = protocols[0] || 'odata-v4') => def?.['@protocol'] || protocols.find(p => def['@'+p]) || _default

module.exports = { ProtocolAdapter, protocol4 }
if (!cds.requires.middlewares) {
  module.exports.ProtocolAdapter = require('./_legacy')
}
